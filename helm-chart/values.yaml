# Global configuration
global:
  imageRegistry: ""
  imagePullSecrets: []

# Application configuration
app:
  name: frontend-app
  version: "1.0.0"
  replicas: 3
  
image:
  repository: kdilipkumar/trend
  tag: "v22"
  pullPolicy: Always

# Namespace configuration
namespace:
  create: true
  name: frontend-app
  labels:
    environment: production
    team: frontend
  annotations:
    description: "Frontend application namespace"

# Service configuration (NodePort for kubeadm accessibility)
service:
  type: NodePort
  port: 80
  targetPort: 80
  nodePort: 30080  # Fixed port for easy access
  name: frontend-service

# Resource configuration (optimized for kubeadm)
resources:
  requests:
    memory: "64Mi"
    cpu: "50m"
  limits:
    memory: "128Mi"
    cpu: "100m"

# Resource quota
resourceQuota:
  enabled: true
  hard:
    requests.cpu: "2"
    requests.memory: "4Gi"
    limits.cpu: "4"
    limits.memory: "8Gi"
    persistentvolumeclaims: "10"
    pods: "10"
    services: "5"

# HPA configuration
hpa:
  enabled: true
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# Security Context
securityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 2000
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  capabilities:
    drop:
      - ALL

# Pod Security Context
podSecurityContext:
  seccompProfile:
    type: RuntimeDefault

# RBAC configuration
rbac:
  create: true
  serviceAccount:
    create: true
    name: frontend-app-sa
    annotations: {}
    automountServiceAccountToken: false

# Network Policy
networkPolicy:
  enabled: true
  ingress:
    enabled: true
    allowedNamespaces:
      - istio-system
      - monitoring
    allowedPorts:
      - 80
      - 15090  # Istio sidecar
  egress:
    enabled: true
    allowedNamespaces:
      - kube-system
      - istio-system
      - monitoring
    allowedPorts:
      - 53    # DNS
      - 443   # HTTPS
      - 80    # HTTP

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    # cert-manager.io/cluster-issuer: "letsencrypt-prod"  # Disabled for kubeadm
  hosts:
    - host: frontend.local
      paths:
        - path: /
          pathType: Prefix
  # tls:  # Disabled for kubeadm cluster
  #   - secretName: frontend-tls
  #     hosts:
  #       - frontend.local

# Istio Service Mesh
istio:
  enabled: true
  injection: enabled
  virtualService:
    enabled: true
    gateways:
      - istio-system/frontend-gateway
    hosts:
      - frontend.local
      - "*"  # Allow access via IP for kubeadm
    http:
      - match:
          - uri:
              prefix: /
        route:
          - destination:
              host: frontend-service
              port:
                number: 80
  gateway:
    enabled: true
    hosts:
      - frontend.local
      - "*"  # Allow access via IP for kubeadm
    tls:
      mode: PASSTHROUGH  # Simplified for kubeadm
      # credentialName: frontend-tls  # Disabled for kubeadm
  destinationRule:
    enabled: true
    trafficPolicy:
      connectionPool:
        tcp:
          maxConnections: 100
        http:
          http1MaxPendingRequests: 50
          maxRequestsPerConnection: 10
      loadBalancer:
        simple: LEAST_CONN
      outlierDetection:
        consecutiveErrors: 3
        interval: 30s
        baseEjectionTime: 30s

# Monitoring
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    interval: 30s
    path: /metrics
  prometheusRule:
    enabled: true

# Prometheus configuration (optimized for kubeadm)
prometheus:
  enabled: true
  server:
    persistentVolume:
      enabled: false  # Disabled for kubeadm to avoid storage issues
      size: 8Gi
    resources:
      requests:
        memory: "256Mi"
        cpu: "100m"
      limits:
        memory: "512Mi"
        cpu: "200m"
  nodeExporter:
    enabled: true
  kubeStateMetrics:
    enabled: true
  alertmanager:
    enabled: false  # Disabled to reduce resource usage

# Grafana configuration (optimized for kubeadm)
grafana:
  enabled: true
  adminPassword: "admin123!"
  persistence:
    enabled: false  # Disabled for kubeadm to avoid storage issues
    size: 5Gi
  resources:
    requests:
      memory: "64Mi"
      cpu: "50m"
    limits:
      memory: "128Mi"
      cpu: "100m"
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: Prometheus
          type: prometheus
          url: http://prometheus-server:80
          access: proxy
          isDefault: true
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
        - name: 'default'
          orgId: 1
          folder: ''
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards

# Health checks
healthChecks:
  readinessProbe:
    httpGet:
      path: /health
      port: 80
    initialDelaySeconds: 10
    periodSeconds: 5
  livenessProbe:
    httpGet:
      path: /health
      port: 80
    initialDelaySeconds: 30
    periodSeconds: 10

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 2